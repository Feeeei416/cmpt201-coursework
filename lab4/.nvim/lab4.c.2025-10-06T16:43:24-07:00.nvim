#define _POSIX_C_SOURCE 200809L
#define _ISOC99_SOURCE
#define _DEFAULT_SOURCE

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BLOCK_SIZE 128
#define HEAP_SIZE 256
#define BUF_SIZE 64

struct header {
  uint64_t size;
  struct header *next;
};

void *increase_heap_size(int EXTRA_SIZE) {
  void *start_address = sbrk(HEAP_SIZE);
  if (start_address == (void *)-1) {
    perror("sbrk() failed");
    exit(EXIT_FAILURE);
  }
  return start_address;
}

void initialize_block(struct header *block, struct header *next, int value) {
  block->size = BLOCK_SIZE;
  block->next = next;
  memset(block + 1, value, BLOCK_SIZE - sizeof(struct header));
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    perror("snprintf");
    exit(EXIT_FAILURE);
  }
  write(STDOUT_FILENO, buf, len);
}

void print_block(char *block) {
  for (int i = 0; i < BLOCK_SIZE - sizeof(struct header); ++i) {
    char *addr = (block + sizeof(struct header) + i);
    uint64_t val = (uint64_t)*addr;
    print_out("%lu\n", &val, sizeof(val));
  }
}

int main() {
  char *start_address = increase_heap_size(HEAP_SIZE);

  struct header *first_block = (struct header *)start_address;
  struct header *second_block = (struct header *)(start_address + BLOCK_SIZE);

  initialize_block(first_block, NULL, 0);
  initialize_block(second_block, first_block, 1);

  print_out("first block:       %p\n", &first_block, sizeof(first_block));
  print_out("second block:      %p\n", &second_block, sizeof(second_block));
  print_out("first block size:  %lu\n", &first_block->size,
            sizeof(first_block->size));
  print_out("first block next:  %p\n", &first_block->next,
            sizeof(first_block->next));
  print_out("second block size: %lu\n", &second_block->size,
            sizeof(second_block->size));
  print_out("second block next: %p\n", &second_block->next,
            sizeof(second_block->next));
  print_block((char *)first_block);
  print_block((char *)second_block);
  return 0;
}
